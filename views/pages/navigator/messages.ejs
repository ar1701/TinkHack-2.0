<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Messages - Navigator Dashboard</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
      rel="stylesheet"
    />
    <link href="/css/navigator-theme.css" rel="stylesheet" />
    <style>
      .chat-container {
        height: calc(100vh - 150px);
        display: flex;
      }

      .contacts-list {
        width: 300px;
        border-right: 1px solid #dee2e6;
        overflow-y: auto;
      }

      .chat-area {
        flex: 1;
        display: flex;
        flex-direction: column;
      }

      .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 20px;
      }

      .message-input {
        border-top: 1px solid #dee2e6;
        padding: 15px;
        background: #fff;
      }

      .contact-item {
        padding: 15px;
        border-bottom: 1px solid #dee2e6;
        cursor: pointer;
        transition: background-color 0.3s;
      }

      .contact-item:hover {
        background-color: #f8f9fa;
      }

      .contact-item.active {
        background-color: #e9ecef;
      }

      .message {
        margin-bottom: 15px;
        max-width: 70%;
      }

      .message.sent {
        margin-left: auto;
      }

      .message-content {
        padding: 10px 15px;
        border-radius: 15px;
        background-color: #f8f9fa;
      }

      .message.sent .message-content {
        background-color: #007bff;
        color: white;
      }

      .typing-indicator {
        font-style: italic;
        color: #6c757d;
        margin: 5px 0;
        display: none;
      }

      .unread-badge {
        background-color: #dc3545;
        color: white;
        border-radius: 50%;
        padding: 2px 6px;
        font-size: 12px;
      }

      .no-messages {
        text-align: center;
        color: #6c757d;
        margin-top: 20px;
      }

      .empty-state {
        text-align: center;
        padding: 40px 20px;
        color: #6c757d;
      }
    </style>
  </head>
  <body>
    <!-- Header -->
    <header class="dashboard-header py-2">
      <div class="container-fluid">
        <div class="d-flex justify-content-between align-items-center">
          <div class="d-flex align-items-center">
            <i class="fas fa-hospital me-2"></i>
            <h4 class="mb-0">MedConnect</h4>
          </div>
          <div class="d-flex align-items-center">
            <span class="me-3">Welcome, <%= user.fullName %></span>
            <a href="/logout" class="btn btn-outline-light btn-sm">Logout</a>
          </div>
        </div>
      </div>
    </header>

    <div class="container-fluid mt-4">
      <div class="chat-container bg-white rounded shadow">
        <!-- Contacts List -->
        <div class="contacts-list" id="contactsList">
          <div class="p-3 bg-light border-bottom">
            <h5 class="mb-0">Connected Patients</h5>
          </div>
          <div id="loadingContacts" class="p-4 text-center">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          </div>
          <div id="noContacts" class="empty-state" style="display: none">
            <i class="fas fa-users fa-3x mb-3"></i>
            <h6>No Connected Patients</h6>
            <p class="text-muted small">
              Check your requests page for pending connections.
            </p>
          </div>
          <div id="contactsContainer"></div>
        </div>

        <!-- Chat Area -->
        <div class="chat-area">
          <div id="emptyChatState" class="empty-state">
            <i class="fas fa-comments fa-3x mb-3"></i>
            <h6>Select a Patient to Start Chatting</h6>
            <p class="text-muted small">
              Choose from your connected patients on the left.
            </p>
          </div>

          <div id="chatInterface" style="display: none; height: 100%">
            <div class="chat-header p-3 bg-light border-bottom">
              <h6 class="mb-0" id="currentContactName"></h6>
            </div>

            <div class="chat-messages" id="chatMessages">
              <div
                id="loadingMessages"
                class="text-center p-4"
                style="display: none"
              >
                <div class="spinner-border text-primary" role="status">
                  <span class="visually-hidden">Loading messages...</span>
                </div>
              </div>
            </div>

            <div class="typing-indicator ms-3" id="typingIndicator">
              Patient is typing...
            </div>

            <div class="message-input">
              <form id="messageForm" class="d-flex gap-2">
                <input
                  type="text"
                  class="form-control"
                  id="messageInput"
                  placeholder="Type your message..."
                  required
                />
                <button type="submit" class="btn btn-primary">
                  <i class="fas fa-paper-plane"></i>
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script src="/js/chat.js"></script>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        // Initialize chat manager
        const chatManager = new ChatManager({
          userId: "<%= user._id %>",
          userType: "navigator",
          onMessageReceived: (message) => {
            appendMessage(message, false);
          },
          onTypingStarted: (userId) => {
            document.getElementById("typingIndicator").style.display = "block";
          },
          onTypingStopped: (userId) => {
            document.getElementById("typingIndicator").style.display = "none";
          },
        });

        let currentContactId = null;

        // Load active patients
        function loadContacts() {
          fetch("/api/navigator/active-patients")
            .then((response) => response.json())
            .then((data) => {
              const loadingEl = document.getElementById("loadingContacts");
              const noContactsEl = document.getElementById("noContacts");
              const containerEl = document.getElementById("contactsContainer");

              loadingEl.style.display = "none";

              if (!data.success || !data.connections.length) {
                noContactsEl.style.display = "block";
                return;
              }

              containerEl.innerHTML = data.connections
                .map(
                  (conn) => `
                            <div class="contact-item" data-user-id="${conn.patient._id}">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-1">${conn.patient.fullName}</h6>
                                        <small class="text-muted">${conn.patient.email}</small>
                                    </div>
                                    <span class="unread-badge" style="display: none;">0</span>
                                </div>
                            </div>
                        `
                )
                .join("");

              // Add click handlers
              document.querySelectorAll(".contact-item").forEach((item) => {
                item.addEventListener("click", () => {
                  const userId = item.dataset.userId;
                  selectContact(userId, item.querySelector("h6").textContent);
                });
              });
            })
            .catch((error) => {
              console.error("Error loading contacts:", error);
              document.getElementById("loadingContacts").style.display = "none";
              document.getElementById("noContacts").style.display = "block";
            });
        }

        function selectContact(userId, name) {
          // Update UI
          document.querySelectorAll(".contact-item").forEach((item) => {
            item.classList.remove("active");
            if (item.dataset.userId === userId) {
              item.classList.add("active");
            }
          });

          currentContactId = userId;
          document.getElementById("currentContactName").textContent = name;
          document.getElementById("emptyChatState").style.display = "none";
          document.getElementById("chatInterface").style.display = "flex";
          document.getElementById("chatMessages").innerHTML = "";
          document.getElementById("loadingMessages").style.display = "block";

          // Load chat history
          chatManager.loadChatHistory(userId);
        }

        function appendMessage(message, isSent) {
          const messagesContainer = document.getElementById("chatMessages");
          const messageElement = document.createElement("div");
          messageElement.className = `message ${isSent ? "sent" : "received"}`;
          messageElement.innerHTML = `
                    <div class="message-content">
                        ${message.content}
                    </div>
                    <small class="text-muted">${new Date(
                      message.timestamp
                    ).toLocaleTimeString()}</small>
                `;
          messagesContainer.appendChild(messageElement);
          messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }

        // Handle message form submission
        document
          .getElementById("messageForm")
          .addEventListener("submit", function (e) {
            e.preventDefault();
            if (!currentContactId) return;

            const input = document.getElementById("messageInput");
            const content = input.value.trim();
            if (!content) return;

            chatManager.sendMessage(currentContactId, content);
            appendMessage({ content, timestamp: new Date() }, true);
            input.value = "";
          });

        // Handle typing indicator
        const messageInput = document.getElementById("messageInput");
        let typingTimeout;

        messageInput.addEventListener("input", () => {
          if (!currentContactId) return;

          chatManager.sendTypingStatus(currentContactId, true);
          clearTimeout(typingTimeout);

          typingTimeout = setTimeout(() => {
            chatManager.sendTypingStatus(currentContactId, false);
          }, 1000);
        });

        // Load initial contacts
        loadContacts();
      });
    </script>
  </body>
</html>
