<%- include('../../partials/header') %>

<div class="row">
  <!-- Upload Section -->
  <div class="col-md-5 col-lg-4">
    <div class="card mb-4">
      <div class="card-body">
        <h5 class="card-title mb-4">Upload Medical Record</h5>
        <form id="uploadForm" enctype="multipart/form-data" class="px-2">
          <div class="mb-3">
            <label class="form-label">Title</label>
            <input type="text" class="form-control" name="title" required />
          </div>
          <div class="mb-3">
            <label class="form-label">Description</label>
            <textarea
              class="form-control"
              name="description"
              rows="3"
              required
            ></textarea>
          </div>
          <div class="mb-3">
            <label class="form-label">Record Type</label>
            <select class="form-select" name="recordType" required>
              <option value="">Select Type</option>
              <option value="Prescription">Prescription</option>
              <option value="Lab Report">Lab Report</option>
              <option value="Imaging">Imaging</option>
              <option value="Discharge Summary">Discharge Summary</option>
              <option value="Other">Other</option>
            </select>
          </div>
          <div class="mb-3">
            <label class="form-label">Record Date</label>
            <input
              type="date"
              class="form-control"
              name="recordDate"
              required
            />
          </div>
          <div class="mb-3">
            <label class="form-label">File</label>
            <input
              type="file"
              class="form-control"
              name="file"
              accept=".pdf,.jpg,.jpeg,.png"
              required
            />
            <small class="text-muted"
              >Supported formats: PDF, JPG, PNG (Max 10MB)</small
            >
          </div>
          <button type="submit" class="btn btn-primary w-100">
            <i class="fas fa-upload me-2"></i>Upload Record
          </button>
        </form>
      </div>
    </div>

    <!-- Search & Filter Section -->
    <div class="card mb-4">
      <div class="card-body">
        <h5 class="card-title mb-4">Search & Filter</h5>

        <!-- Search Bar -->
        <div class="mb-3">
          <div class="input-group">
            <input
              type="text"
              id="searchInput"
              class="form-control"
              placeholder="Search records..."
            />
            <button class="btn btn-primary" type="button" id="searchButton">
              <i class="fas fa-search"></i>
            </button>
          </div>
        </div>

        <!-- Filter Buttons -->
        <div class="filter-buttons">
          <div class="d-flex flex-wrap gap-2 mb-2">
            <button
              class="btn btn-sm btn-outline-primary rounded-pill filter-btn active"
              data-filter="all"
            >
              All Records
            </button>
            <button
              class="btn btn-sm btn-outline-info rounded-pill filter-btn"
              data-filter="Prescription"
            >
              Prescriptions
            </button>
            <button
              class="btn btn-sm btn-outline-success rounded-pill filter-btn"
              data-filter="Lab Report"
            >
              Lab Reports
            </button>
            <button
              class="btn btn-sm btn-outline-warning rounded-pill filter-btn"
              data-filter="Imaging"
            >
              Imaging
            </button>
            <button
              class="btn btn-sm btn-outline-secondary rounded-pill filter-btn"
              data-filter="Discharge Summary"
            >
              Discharge Summaries
            </button>
            <button
              class="btn btn-sm btn-outline-dark rounded-pill filter-btn"
              data-filter="Other"
            >
              Other
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Records List Section -->
  <div class="col-md-8">
    <div class="card mb-4">
      <div class="card-body">
        <div class="d-flex justify-content-between align-items-center mb-4">
          <h5 class="card-title mb-0">
            <i class="fas fa-file-medical text-primary me-2"></i>My Medical Records
          </h5>
          <span class="badge rounded-pill bg-primary" id="recordCount">0 Records</span>
        </div>

        <!-- Search Results Section (Initially Hidden) -->
        <div id="searchResultsSection" style="display: none">
          <h6 class="border-bottom pb-2 mb-3">
            Search Results
            <span id="searchResultsCount" class="text-muted">(0 results)</span>
          </h6>
          <div id="searchResults" class="list-group mb-4">
            <!-- Search results will be populated here -->
          </div>
          <button id="clearSearch" class="btn btn-sm btn-outline-secondary mb-4">
            <i class="fas fa-times me-2"></i>Clear Search
          </button>
        </div>

        <!-- All Records List -->
        <div id="recordsList" class="list-group">
          <!-- Records will be populated here -->
          <div class="text-center py-5 text-muted" id="noRecords">
            <i class="fas fa-folder-open fa-3x mb-3"></i>
            <p>No records found. Upload your first medical record!</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Medical Records Chat Interface -->
    <div class="card">
      <div class="card-header bg-primary text-white">
        <div class="d-flex align-items-center">
          <i class="fas fa-robot me-2"></i>
          <h5 class="mb-0">Medical Records Assistant</h5>
        </div>
      </div>
      <div class="card-body">
        <div class="mb-3 chat-container" style="height: 300px; overflow-y: auto; border: 1px solid #eee; border-radius: 5px; padding: 15px;">
          <div id="medicalRecordChatMessages">
            <div class="p-3 bg-light rounded mb-3">
              <i class="fas fa-robot text-primary me-2"></i>
              <span>Hello! I can help answer questions about your medical records. Try asking things like "What medications am I taking?" or "What were the results of my last blood test?"</span>
            </div>
          </div>
        </div>
        <form id="medicalRecordChatForm" class="d-flex">
          <input type="text" id="medicalRecordQuestion" class="form-control me-2" placeholder="Ask a question about your medical records...">
          <button type="submit" class="btn btn-primary">
            <i class="fas fa-paper-plane"></i>
          </button>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Edit Record Modal -->
<div class="modal fade" id="editRecordModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit Medical Record</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        <form id="editForm" class="px-2" enctype="multipart/form-data">
          <input type="hidden" id="editRecordId" />
          <div class="mb-3">
            <label class="form-label">Title</label>
            <input type="text" class="form-control" id="editTitle" required />
          </div>
          <div class="mb-3">
            <label class="form-label">Description</label>
            <textarea
              class="form-control"
              id="editDescription"
              rows="3"
              required
            ></textarea>
          </div>
          <div class="row">
            <div class="col-md-6 mb-3">
              <label class="form-label">Record Type</label>
              <select class="form-select" id="editRecordType" required>
                <option value="Prescription">Prescription</option>
                <option value="Lab Report">Lab Report</option>
                <option value="Imaging">Imaging</option>
                <option value="Discharge Summary">Discharge Summary</option>
                <option value="Other">Other</option>
              </select>
            </div>
            <div class="col-md-6 mb-3">
              <label class="form-label">Record Date</label>
              <input
                type="date"
                class="form-control"
                id="editRecordDate"
                required
              />
            </div>
          </div>
          <div class="mb-3">
            <label class="form-label">Update File</label>
            <input
              type="file"
              class="form-control"
              id="editFile"
              name="file"
              accept=".pdf,.jpg,.jpeg,.png"
            />
            <small class="text-muted">Leave empty to keep existing file</small>
          </div>
          <div class="mb-3">
            <label class="form-label">Current File</label>
            <div id="currentFilePreview" class="border rounded p-2">
              <div class="d-flex align-items-center">
                <i class="fas fa-file me-2"></i>
                <span id="currentFileName">No file selected</span>
              </div>
              <div id="filePreviewContent" class="mt-2"></div>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          Cancel
        </button>
        <button type="button" class="btn btn-primary" id="updateRecord">
          Update Record
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteRecordModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Confirm Delete</h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete this medical record?</p>
        <p class="text-danger">This action cannot be undone.</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          Cancel
        </button>
        <button type="button" class="btn btn-danger" id="confirmDelete">
          Delete Record
        </button>
      </div>
    </div>
  </div>
</div>

<!-- View Record Modal -->
<div class="modal fade" id="viewRecordModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="viewRecordTitle"></h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
          aria-label="Close"
        ></button>
      </div>
      <div class="modal-body">
        <div class="row mb-3">
          <div class="col-md-6">
            <p>
              <strong>Type:</strong>
              <span class="badge rounded-pill" id="viewRecordType"></span>
            </p>
            <p>
              <strong>Record Date:</strong>
              <span id="viewRecordDate"></span>
            </p>
            <p>
              <strong>Upload Date:</strong>
              <span id="viewUploadDate"></span>
            </p>
          </div>
          <div class="col-md-6">
            <p>
              <strong>Description:</strong>
            </p>
            <p id="viewDescription"></p>
          </div>
        </div>
        <div class="text-center" id="viewRecordFile"></div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          Close
        </button>
        <a
          href="#"
          class="btn btn-primary"
          id="downloadRecordBtn"
          target="_blank"
        >
          <i class="fas fa-download me-2"></i>Download
        </a>
      </div>
    </div>
  </div>
</div>

<!-- Bootstrap Bundle with Popper -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const uploadForm = document.getElementById("uploadForm");
    const recordsList = document.getElementById("recordsList");
    const noRecords = document.getElementById("noRecords");
    const recordCount = document.getElementById("recordCount");
    const searchInput = document.getElementById("searchInput");
    const searchButton = document.getElementById("searchButton");
    const clearSearch = document.getElementById("clearSearch");
    const searchResults = document.getElementById("searchResults");
    const searchResultsSection = document.getElementById(
      "searchResultsSection"
    );
    const searchResultsCount = document.getElementById("searchResultsCount");
    const filterButtons = document.querySelectorAll(".filter-btn");

    let records = [];
    let currentFilter = "all";
    let currentRecordId = null;

    // Load records when page loads
    fetchRecords();

    // Handle form submission
    uploadForm.addEventListener("submit", function (e) {
      e.preventDefault();
      const formData = new FormData(uploadForm);

      // Show loading
      Swal.fire({
        title: "Uploading...",
        text: "Please wait while we upload your record.",
        allowOutsideClick: false,
        showConfirmButton: false,
        willOpen: () => {
          Swal.showLoading();
        },
      });

      fetch("/api/medical-records/upload", {
        method: "POST",
        body: formData,
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            Swal.fire({
              icon: "success",
              title: "Success!",
              text: data.message,
            });
            uploadForm.reset();
            fetchRecords();
          } else {
            Swal.fire({
              icon: "error",
              title: "Error!",
              text: data.message,
            });
          }
        })
        .catch((error) => {
          console.error("Error:", error);
          Swal.fire({
            icon: "error",
            title: "Error!",
            text: "An error occurred during upload.",
          });
        });
    });

    // Fetch records function
    function fetchRecords() {
      fetch("/api/medical-records")
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            records = data.records;
            updateRecordsList();
          } else {
            console.error("Error fetching records:", data.message);
          }
        })
        .catch((error) => {
          console.error("Error:", error);
        });
    }

    // Update records list function
    function updateRecordsList() {
      // Update record count
      recordCount.textContent = `${records.length} Records`;

      // Filter records if needed
      let filteredRecords = records;
      if (currentFilter !== "all") {
        filteredRecords = records.filter(
          (record) => record.recordType === currentFilter
        );
      }

      // Clear the list
      recordsList.innerHTML = "";

      // Update UI based on records
      if (filteredRecords.length === 0) {
        noRecords.style.display = "block";
      } else {
        noRecords.style.display = "none";

        // Add records to list
        filteredRecords.forEach((record) => {
          // Create record item
          const recordItem = createRecordItem(record);
          recordsList.appendChild(recordItem);
        });
      }
    }

    // Create record item function
    function createRecordItem(record) {
      const recordDate = new Date(record.recordDate).toLocaleDateString();
      const uploadDate = new Date(record.uploadDate).toLocaleDateString();

      // Get badge class based on record type
      let badgeClass = "bg-secondary";
      switch (record.recordType) {
        case "Prescription":
          badgeClass = "bg-info";
          break;
        case "Lab Report":
          badgeClass = "bg-success";
          break;
        case "Imaging":
          badgeClass = "bg-warning";
          break;
        case "Discharge Summary":
          badgeClass = "bg-primary";
          break;
      }

      // Create record item element
      const div = document.createElement("div");
      div.className = "list-group-item list-group-item-action";
      div.innerHTML = `
        <div class="d-flex w-100 justify-content-between align-items-center">
          <h6 class="mb-1">${record.title}</h6>
          <span class="badge ${badgeClass}">${record.recordType}</span>
        </div>
        <p class="mb-1 text-truncate">${record.description}</p>
        <div class="d-flex justify-content-between align-items-center">
          <small class="text-muted">Date: ${recordDate}</small>
          <div>
            <button class="btn btn-sm btn-outline-primary view-btn" data-id="${record._id}">
              <i class="fas fa-eye"></i>
            </button>
            <button class="btn btn-sm btn-outline-secondary edit-btn" data-id="${record._id}">
              <i class="fas fa-edit"></i>
            </button>
            <button class="btn btn-sm btn-outline-danger delete-btn" data-id="${record._id}">
              <i class="fas fa-trash"></i>
            </button>
          </div>
        </div>
      `;

      // Add event listeners for buttons
      div.querySelector(".view-btn").addEventListener("click", function () {
        viewRecord(record);
      });

      div.querySelector(".edit-btn").addEventListener("click", function () {
        openEditModal(record);
      });

      div.querySelector(".delete-btn").addEventListener("click", function () {
        openDeleteModal(record._id);
      });

      return div;
    }

    // Handle filter buttons
    filterButtons.forEach((button) => {
      button.addEventListener("click", function () {
        // Remove active class from all buttons
        filterButtons.forEach((btn) => btn.classList.remove("active"));

        // Add active class to clicked button
        this.classList.add("active");

        // Update filter
        currentFilter = this.getAttribute("data-filter");

        // Update records list
        updateRecordsList();
      });
    });

    // Handle search
    searchButton.addEventListener("click", function () {
      const query = searchInput.value.trim();
      if (query) {
        searchRecords(query);
      }
    });

    // Search on Enter key
    searchInput.addEventListener("keyup", function (e) {
      if (e.key === "Enter") {
        const query = searchInput.value.trim();
        if (query) {
          searchRecords(query);
        }
      }
    });

    // Clear search
    clearSearch.addEventListener("click", function () {
      searchInput.value = "";
      searchResultsSection.style.display = "none";
      updateRecordsList();
    });

    // Search records function
    function searchRecords(query) {
      fetch(`/api/medical-records/search?query=${encodeURIComponent(query)}`)
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            displaySearchResults(data.results);
          } else {
            console.error("Error searching records:", data.message);
          }
        })
        .catch((error) => {
          console.error("Error:", error);
        });
    }

    // Display search results
    function displaySearchResults(results) {
      searchResults.innerHTML = "";
      searchResultsCount.textContent = `(${results.length} results)`;

      if (results.length === 0) {
        const noResults = document.createElement("div");
        noResults.className = "text-center py-3 text-muted";
        noResults.innerHTML = `
          <p>No records match your search.</p>
        `;
        searchResults.appendChild(noResults);
      } else {
        results.forEach((result) => {
          const record = result.record;
          const recordItem = createRecordItem(record);

          // Add explanation if available
          if (result.explanation) {
            const explanation = document.createElement("div");
            explanation.className = "mt-2 small text-muted";
            explanation.innerHTML = `<i class="fas fa-info-circle me-1"></i> ${result.explanation}`;
            recordItem.appendChild(explanation);
          }

          searchResults.appendChild(recordItem);
        });
      }

      searchResultsSection.style.display = "block";
    }

    // View record function
    function viewRecord(record) {
      const recordDate = new Date(record.recordDate).toLocaleDateString();
      const uploadDate = new Date(record.uploadDate).toLocaleDateString();

      // Get badge class based on record type
      let badgeClass = "bg-secondary";
      switch (record.recordType) {
        case "Prescription":
          badgeClass = "bg-info";
          break;
        case "Lab Report":
          badgeClass = "bg-success";
          break;
        case "Imaging":
          badgeClass = "bg-warning";
          break;
        case "Discharge Summary":
          badgeClass = "bg-primary";
          break;
      }

      // Update modal content
      document.getElementById("viewRecordTitle").textContent = record.title;
      document.getElementById("viewRecordType").textContent = record.recordType;
      document.getElementById(
        "viewRecordType"
      ).className = `badge ${badgeClass}`;
      document.getElementById("viewRecordDate").textContent = recordDate;
      document.getElementById("viewUploadDate").textContent = uploadDate;
      document.getElementById("viewDescription").textContent =
        record.description;

      // Set download link
      document.getElementById("downloadRecordBtn").href = record.fileUrl;

      // Display file
      const fileContainer = document.getElementById("viewRecordFile");
      fileContainer.innerHTML = "";

      if (record.fileUrl.endsWith(".pdf")) {
        // For PDF files, show an embed
        fileContainer.innerHTML = `
          <embed src="${record.fileUrl}" type="application/pdf" width="100%" height="500px" />
        `;
      } else {
        // For images, show an image
        fileContainer.innerHTML = `
          <img src="${record.fileUrl}" class="img-fluid" alt="Medical Record" />
        `;
      }

      // Show modal
      const viewModal = new bootstrap.Modal(
        document.getElementById("viewRecordModal")
      );
      viewModal.show();
    }

    // Open edit modal function
    function openEditModal(record) {
      // Set form values
      document.getElementById("editRecordId").value = record._id;
      document.getElementById("editTitle").value = record.title;
      document.getElementById("editDescription").value = record.description;
      document.getElementById("editRecordType").value = record.recordType;

      // Format date for input field (YYYY-MM-DD)
      const recordDate = new Date(record.recordDate);
      const formattedDate = recordDate.toISOString().split("T")[0];
      document.getElementById("editRecordDate").value = formattedDate;

      // Update file preview
      document.getElementById("currentFileName").textContent = record.title;
      const previewContainer = document.getElementById("filePreviewContent");
      previewContainer.innerHTML = "";

      if (record.fileUrl) {
        if (record.fileUrl.toLowerCase().endsWith(".pdf")) {
          previewContainer.innerHTML = `
            <div class="ratio ratio-16x9" style="max-height: 300px;">
              <embed src="${record.fileUrl}" type="application/pdf" width="100%" height="100%"/>
            </div>
          `;
        } else {
          previewContainer.innerHTML = `
            <img src="${record.fileUrl}" class="img-fluid rounded" style="max-height: 200px;" alt="File preview"/>
          `;
        }
      }

      // Show modal
      const editModal = new bootstrap.Modal(
        document.getElementById("editRecordModal")
      );
      editModal.show();
    }

    // Update record event listener
    document
      .getElementById("updateRecord")
      .addEventListener("click", function () {
        const recordId = document.getElementById("editRecordId").value;
        const title = document.getElementById("editTitle").value;
        const description = document.getElementById("editDescription").value;
        const recordType = document.getElementById("editRecordType").value;
        const recordDate = document.getElementById("editRecordDate").value;

        // Validate form
        if (!title || !description || !recordType || !recordDate) {
          Swal.fire({
            icon: "error",
            title: "Error!",
            text: "Please fill all required fields.",
          });
          return;
        }

        // Update record
        updateRecord(recordId, title, description, recordType, recordDate);
      });

    // Update record function
    function updateRecord(id, title, description, recordType, recordDate) {
      // Show loading indicator
      Swal.fire({
        title: "Updating...",
        text: "Please wait while we update your record.",
        allowOutsideClick: false,
        showConfirmButton: false,
        willOpen: () => {
          Swal.showLoading();
        },
      });

      const formData = new FormData();
      formData.append("title", title);
      formData.append("description", description);
      formData.append("recordType", recordType);
      formData.append("recordDate", recordDate);

      // Add file if selected
      const fileInput = document.getElementById("editFile");
      if (fileInput.files.length > 0) {
        formData.append("file", fileInput.files[0]);
      }

      fetch(`/api/medical-records/${id}`, {
        method: "PUT",
        body: formData,
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            const editModal = bootstrap.Modal.getInstance(
              document.getElementById("editRecordModal")
            );
            editModal.hide();

            Swal.fire({
              icon: "success",
              title: "Success!",
              text: data.message,
            });

            fetchRecords();
          } else {
            Swal.fire({
              icon: "error",
              title: "Error!",
              text: data.message,
            });
          }
        })
        .catch((error) => {
          console.error("Error:", error);
          Swal.fire({
            icon: "error",
            title: "Error!",
            text: "An error occurred while updating the record.",
          });
        });
    }

    // Open delete modal function
    function openDeleteModal(id) {
      currentRecordId = id;
      const deleteModal = new bootstrap.Modal(
        document.getElementById("deleteRecordModal")
      );
      deleteModal.show();
    }

    // Confirm delete event listener
    document
      .getElementById("confirmDelete")
      .addEventListener("click", function () {
        if (currentRecordId) {
          deleteRecord(currentRecordId);
        }
      });

    // Delete record function
    function deleteRecord(id) {
      // Show loading indicator
      Swal.fire({
        title: "Deleting...",
        text: "Please wait while we delete your record.",
        allowOutsideClick: false,
        showConfirmButton: false,
        willOpen: () => {
          Swal.showLoading();
        },
      });

      fetch(`/api/medical-records/${id}`, {
        method: "DELETE",
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.success) {
            // Close modal
            const deleteModal = bootstrap.Modal.getInstance(
              document.getElementById("deleteRecordModal")
            );
            deleteModal.hide();

            // Show success message
            Swal.fire({
              icon: "success",
              title: "Success!",
              text: data.message,
            });

            // Refresh records
            fetchRecords();
          } else {
            Swal.fire({
              icon: "error",
              title: "Error!",
              text: data.message,
            });
          }
        })
        .catch((error) => {
          console.error("Error:", error);
          Swal.fire({
            icon: "error",
            title: "Error!",
            text: "An error occurred while deleting the record.",
          });
        });
    }

    // Add preview for new file selection
    document
      .getElementById("editFile")
      .addEventListener("change", function (e) {
        const file = e.target.files[0];
        if (file) {
          document.getElementById("currentFileName").textContent = file.name;
          const previewContainer =
            document.getElementById("filePreviewContent");

          if (file.type === "application/pdf") {
            const url = URL.createObjectURL(file);
            previewContainer.innerHTML = `
            <div class="ratio ratio-16x9" style="max-height: 300px;">
              <embed src="${url}" type="application/pdf" width="100%" height="100%"/>
            </div>
          `;
          } else if (file.type.startsWith("image/")) {
            const reader = new FileReader();
            reader.onload = function (e) {
              previewContainer.innerHTML = `
              <img src="${e.target.result}" class="img-fluid rounded" style="max-height: 200px;" alt="File preview"/>
            `;
            };
            reader.readAsDataURL(file);
          }
        }
      });

    // Medical Records Chat functionality
    const medicalRecordChatForm = document.getElementById("medicalRecordChatForm");
    const medicalRecordQuestion = document.getElementById("medicalRecordQuestion");
    const medicalRecordChatMessages = document.getElementById("medicalRecordChatMessages");

    function addChatMessage(message, isUser = false) {
      const messageDiv = document.createElement("div");
      messageDiv.className = `${isUser ? 'text-end' : ''} mb-3`;
      
      const contentDiv = document.createElement("div");
      contentDiv.className = `d-inline-block p-3 rounded ${
        isUser ? 'bg-primary text-white' : 'bg-light'
      }`;
      contentDiv.style.maxWidth = '80%';
      
      if (!isUser) {
        contentDiv.innerHTML = `<i class="fas fa-robot text-primary me-2"></i>`;
      }
      
      contentDiv.innerHTML += message;
      
      messageDiv.appendChild(contentDiv);
      medicalRecordChatMessages.appendChild(messageDiv);
      
      // Scroll to bottom
      const chatContainer = medicalRecordChatMessages.parentElement;
      chatContainer.scrollTop = chatContainer.scrollHeight;
    }

    medicalRecordChatForm.addEventListener("submit", async function (e) {
      e.preventDefault();
      const question = medicalRecordQuestion.value.trim();
      
      if (!question) return;
      
      // Add user message
      addChatMessage(question, true);
      medicalRecordQuestion.value = "";
      
      // Add loading message
      const loadingDiv = document.createElement("div");
      loadingDiv.className = "mb-3";
      loadingDiv.innerHTML = `
        <div class="d-inline-block p-3 rounded bg-light">
          <i class="fas fa-robot text-primary me-2"></i>
          <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
          Processing your question...
        </div>
      `;
      medicalRecordChatMessages.appendChild(loadingDiv);
      
      // Scroll to bottom
      const chatContainer = medicalRecordChatMessages.parentElement;
      chatContainer.scrollTop = chatContainer.scrollHeight;
      
      try {
        const response = await fetch("/api/medical-records/query", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ question }),
        });
        
        const data = await response.json();
        
        // Remove loading message
        medicalRecordChatMessages.removeChild(loadingDiv);
        
        if (data.success) {
          let answer = data.answer;
          if (data.sources && data.sources.length > 0) {
            answer += '<hr class="my-2">';
            answer += '<small class="text-muted">Sources:</small><br>';
            answer += '<small class="text-muted">' + data.sources.join('<br>') + '</small>';
          }
          addChatMessage(answer);
        } else {
          addChatMessage("I'm sorry, I encountered an error processing your question. Please try again.");
        }
      } catch (error) {
        console.error("Error:", error);
        // Remove loading message
        medicalRecordChatMessages.removeChild(loadingDiv);
        addChatMessage("I'm sorry, I encountered an error processing your question. Please try again.");
      }
    });
  });
</script>

<!-- Chatbot CSS and JavaScript -->
<link href="/css/chatbot-styles.css" rel="stylesheet" />
<script src="/js/chatbot.js"></script>
</body>
</html>
